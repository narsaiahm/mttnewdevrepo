buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.11.6"
        classpath "org.grails.plugins:hibernate5:6.0.4"
    }
}

version "1.0"
group "org.mountsinai.mortalitytriggersystem"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

buildProperties {
    inputs.property('info.app.buildDate', new Date().format('yyyy-MM-dd'))
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])  /* All local jar files */
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.2.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.2.Final"
    compile "org.grails.plugins:quartz:2.0.12"
    compile "com.xlson.groovycsv:groovycsv:1.1"
    compile "org.codehaus.gpars:gpars:1.2.0"
    compile "org.grails.plugins:export:2.0.0"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.11.6"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

bootRun {
    jvmArgs = ['-Dspring.output.ansi.enabled=always']
}

assets {
    minifyJs = true
    minifyCss = true
    includes = ['*.*']
}

war {
    println 'Processing war'
    webInf { from 'web-conf' }

    FileTree classpathTree = classpath.getAsFileTree()
    FileTree libsTree = fileTree(dir: 'libs', include: ['*.jar'])

    /* Include pattern overrides Exclude pattern */
    def jarPatternStringForINCLUDE = "[\\w\\W]*(---)[\\w\\W]*.jar"
    def jarPatternStringForEXCLUDE = "[\\w\\W]*[\\w\\W]*.jar"

    classpathTree.minus(libsTree).getFiles().each { File file ->
        if(file.name.endsWith(".jar") && file.name.matches(jarPatternStringForEXCLUDE) && !file.name.matches(jarPatternStringForINCLUDE) ) {
            rootSpec.exclude(file.name)
        }
    }
}